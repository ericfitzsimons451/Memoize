{"version":3,"sources":["Question.js","AnswerCard.js","IncorrectAnswerPopup.js","Display.js","InstructionsButton.js","Instructions.js","ShowAllQuestionsButton.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","react_default","a","createElement","className","id","questionInfo","question","onClick","verifyAnswer","answer1","answer2","answer3","AnswerCard","correctAnswer","putInLocalStorage","returnToDisplayAll","href","link","target","rel","IncorrectAnswerPopup","type","Display","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","itemsForStorage","localStorage","length","defineProperty","state","currentAnswerToDisplay","setItem","JSON","stringify","parse","getItem","setAnsweredQuestionsInState","setState","showAllQuestions","displayAnswer","event","identifier","parentElement","selectedQuestion","questionBank","find","innerText","showIncorrectAnswerPopup","_this2","map","src_Question","key","src_IncorrectAnswerPopup","src_AnswerCard","Component","InstructionsButton","displayInstructions","Instructions","returnToMainDisplay","ShowAllQuestionsButton","App","showInstructions","getUnansweredQuestions","correctQuestionIds","correctlyAnsweredQuestions","keys","data","filter","includes","toString","obj","clear","isLoading","fetch","then","response","json","mod2information","catch","err","console","log","src_Instructions","src_Display","src_InstructionsButton","src_ShowAllQuestionsButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wQAceA,MAXf,SAAkBC,GAChB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBC,GAAIL,EAAMM,aAAaD,IACpDJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,wBAAwBJ,EAAMM,aAAaD,GAAzD,KAA+DL,EAAMM,aAAaC,UAClFN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uBAAuBI,QAASR,EAAMS,cAAeT,EAAMM,aAAaI,SACtFT,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uBAAuBI,QAASR,EAAMS,cAAeT,EAAMM,aAAaK,SACtFV,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBAAyBI,QAASR,EAAMS,cAAeT,EAAMM,aAAaM,WCS/EC,MAff,SAAoBb,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,GAAIL,EAAMM,aAAaD,IAClDJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,wBAAd,YACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBAAyBJ,EAAMM,aAAaD,GAA1D,KAAgEL,EAAMM,aAAaC,UACnFN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BAAd,mBAA6DJ,EAAMM,aAAaQ,eAChFb,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAd,6CACAH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,2BAA2BI,QAASR,EAAMe,mBAA5D,sCACAd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAd,8EACAH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,6BAA6BI,QAASR,EAAMgB,oBAA9D,uBACAf,EAAAC,EAAAC,cAAA,KAAGc,KAAMjB,EAAMM,aAAaY,KAAMd,UAAU,oBAAoBe,OAAO,SAASC,IAAI,uBAApF,qBCASC,MAVf,SAA8BrB,GAC5B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,gCACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,6BACAH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAAgBkB,KAAK,SAASd,QAASR,EAAMgB,oBAA/D,6BC0ESO,cA3Eb,SAAAA,EAAYvB,GAAO,IAAAwB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM3B,KAURe,kBAAoB,WAClB,IAAIgB,EACwB,IAAxBC,aAAaC,QACfF,EAAeN,OAAAS,EAAA,EAAAT,CAAA,GAAKD,EAAKW,MAAMC,uBAAuB/B,IAAK,GAC3D2B,aAAaK,QAAQ,iBAAkBC,KAAKC,UAAUR,KAC7CC,aAAaC,OAAS,KAC/BF,EAAkBO,KAAKE,MAAMR,aAAaS,QAAQ,oBAClCjB,EAAKW,MAAMC,uBAAuB/B,KAAM,EACxD2B,aAAaK,QAAQ,iBAAkBC,KAAKC,UAAUR,KAExDP,EAAKxB,MAAM0C,4BAA4BX,GACvCP,EAAKmB,SAAS,CAACP,uBAAwB,KAAMQ,kBAAkB,EAAMC,eAAe,KAtBnErB,EAyBnBf,aAAe,SAACqC,GACd,IAAIC,EAAaD,EAAM3B,OAAO6B,cAAc3C,GACxC4C,EAAmBzB,EAAKxB,MAAMkD,aAAaC,KAAK,SAAC5C,GACnD,OAAOA,EAASF,IAAM0C,IAEpBD,EAAM3B,OAAOiC,YAAcH,EAAiBnC,cAC9CU,EAAKmB,SAAS,CAACE,eAAe,EAAOT,uBAAwB,KAAMQ,kBAAkB,EAAOS,0BAA0B,IAEtH7B,EAAKmB,SAAS,CAACE,eAAe,EAAMT,uBAAwBa,EAAkBL,kBAAkB,KAjCjFpB,EAqCnBR,mBAAqB,WACnBQ,EAAKmB,SAAS,CAACE,eAAe,EAAOT,uBAAwB,KAAMQ,kBAAkB,EAAMS,0BAA0B,KAnCrH7B,EAAKW,MAAQ,CACXS,kBAAkB,EAClBC,eAAe,EACfT,uBAAwB,KACxBiB,0BAA0B,GAPX7B,wEAyCV,IAAA8B,EAAA3B,KACP,OAAIA,KAAKQ,MAAMS,iBAEX3C,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAEZuB,KAAK3B,MAAMkD,aAAaK,IAAI,SAAChD,GAC3B,OAAON,EAAAC,EAAAC,cAACqD,EAAD,CACClD,aAAcC,EACdE,aAAc6C,EAAK7C,aACnBgD,IAAKlD,EAASF,SAKQ,IAA7BsB,KAAKQ,MAAMU,gBAA2D,IAAhClB,KAAKQ,MAAMS,mBAAsE,IAAxCjB,KAAKQ,MAAMkB,yBAE/FpD,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBACdH,EAAAC,EAAAC,cAACuD,EAAD,CACE1C,mBAAoBW,KAAKX,mBACzBV,aAAcqB,KAAKQ,MAAMC,2BAIQ,IAAhCT,KAAKQ,MAAMS,mBAA2D,IAA7BjB,KAAKQ,MAAMU,cAE3D5C,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBACdH,EAAAC,EAAAC,cAACwD,EAAD,CAAYrD,aAAcqB,KAAKQ,MAAMC,uBAAwBrB,kBAAmBY,KAAKZ,kBACnFC,mBAAoBW,KAAKX,2BAJ1B,SAjEW4C,aCOPC,MAVf,SAA4B7D,GAC1B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,sBAAsBkB,KAAK,SAASd,QAASR,EAAM8D,qBAArE,4BCQSC,MAXf,SAAsB/D,GACpB,OACEC,EAAAC,EAAAC,cAAA,WAASC,UAAU,wBACjBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uBAAd,uBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,wBAAb,4DACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,wBAAb,qFACAH,EAAAC,EAAAC,cAAA,UAAQmB,KAAK,SAASlB,UAAU,2BAA2BI,QAASR,EAAMgE,qBAA1E,eCESC,MARf,SAAgCjE,GAC9B,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQmB,KAAK,SAASlB,UAAU,4BAA4BI,QAASR,EAAM4C,kBAA3E,yBCqFSsB,cAnFb,SAAAA,IAAc,IAAA1C,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuC,IACZ1C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyC,GAAApC,KAAAH,QAmBFmC,oBAAsB,WACpBtC,EAAKmB,SAAS,CAACwB,kBAAkB,KArBrB3C,EAwBdwC,oBAAsB,WACpBxC,EAAKmB,SAAS,CAACwB,kBAAkB,KAzBrB3C,EA4Bd4C,uBAAyB,WACvB,IAAIC,EAAqB7C,EAAKW,MAAMmC,2BAA6B7C,OAAO8C,KAAK/C,EAAKW,MAAMmC,4BAA8B,GAItH,OAHwB9C,EAAKW,MAAMqC,KAAKC,OAAO,SAAClE,GAC9C,OAAQ8D,EAAmBK,SAASnE,EAASF,GAAGsE,eA/BtCnD,EAoCdkB,4BAA8B,SAACkC,GAC7BpD,EAAKmB,SAAS,CAAC2B,2BAA4BM,KArC/BpD,EAwCdoB,iBAAmB,SAACgC,GAClB5C,aAAa6C,QACbrD,EAAKmB,SAAS,CAAC2B,2BAA4BM,EAAKE,WAAW,EAAOX,kBAAkB,KAvCpF3C,EAAKW,MAAQ,CACXqC,KAAM,KACNM,WAAW,EACXX,kBAAkB,EAClBG,2BAA4BhC,KAAKE,MAAMR,aAAaS,QAAQ,oBAPlDjB,mFAWM,IAAA8B,EAAA3B,KAClBoD,MAAM,gEACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAR,GACJlB,EAAKX,SAAS,CAAC6B,KAAMA,EAAKW,gBAAiBL,WAAW,MAEvDM,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,sCA6B1B,OAAI1D,KAAKQ,MAAM2C,UAEX7E,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yBAG8B,IAAzBwB,KAAKQ,MAAM2C,YAAuD,IAAhCnD,KAAKQ,MAAMgC,iBAElDlE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAClBH,EAAAC,EAAAC,cAACqF,EAAD,CAAcxB,oBAAqBrC,KAAKqC,sBACxC/D,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,qBACAH,EAAAC,EAAAC,cAACsF,EAAD,CAASvC,aAAcvB,KAAKyC,yBACnB1B,4BAA6Bf,KAAKe,4BAClCe,IAAK9B,KAAKQ,MAAMqC,KAAKnE,OAMlCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,qBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAACuF,EAAD,CAAoB5B,oBAAqBnC,KAAKmC,sBAC9C7D,EAAAC,EAAAC,cAACwF,EAAD,CAAwB/C,iBAAkBjB,KAAKiB,oBAEjD3C,EAAAC,EAAAC,cAACsF,EAAD,CAASvC,aAAcvB,KAAKyC,yBACnB1B,4BAA6Bf,KAAKe,4BAClCe,IAAK9B,KAAKQ,MAAMqC,KAAKnE,cA5ExBuD,aCKEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjG,EAAAC,EAAAC,cAACgG,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.03193388.chunk.js","sourcesContent":["import React from 'react';\nimport './main.scss'\n\nfunction Question(props) {\n  return (\n    <div className=\"question-card\" id={props.questionInfo.id}>\n      <h2 className=\"question-card--topic\">{props.questionInfo.id}) {props.questionInfo.question}</h2>\n      <h3 className=\"answer-selection-one\" onClick={props.verifyAnswer}>{props.questionInfo.answer1}</h3>\n      <h3 className=\"answer-selection-two\" onClick={props.verifyAnswer}>{props.questionInfo.answer2}</h3>\n      <h3 className=\"answer-selection-three\" onClick={props.verifyAnswer}>{props.questionInfo.answer3}</h3>\n    </div>\n  )\n}\n\nexport default Question;","import React from 'react';\nimport './main.scss';\n\nfunction AnswerCard(props) {\n  return(\n    <div className=\"answer-card\" id={props.questionInfo.id}>\n      <h2 className=\"answer-card--correct\">CORRECT!</h2>\n      <h3 className=\"answer-card--question\">{props.questionInfo.id}) {props.questionInfo.question}</h3>\n      <h3 className=\"answer-card--correct-answer\">Correct Answer: {props.questionInfo.correctAnswer}</h3>\n      <h3 className=\"answer-card--text\">Are you confident about this information?</h3>\n      <button className=\"answer-card--save-button\" onClick={props.putInLocalStorage}>Save and Remove from Question Bank</button>\n      <h3 className=\"answer-card--text\">Not so confident?  Go back to the question bank.  You can try again later!</h3>\n      <button className=\"answer-card--return-button\" onClick={props.returnToDisplayAll}>Return without save</button>\n      <a href={props.questionInfo.link} className=\"answer-card--link\" target=\"_blank\" rel=\"noopener noreferrer\">Want More Info?</a>\n    </div>\n  )\n}\n\nexport default AnswerCard;","import React from 'react';\nimport './main.scss'\n\nfunction IncorrectAnswerPopup(props) {\n  return(\n    <div className=\"popup--container\">\n      <h2 className=\"popup--title\">Your answer was not correct!</h2>\n      <h3 className=\"popup-text\">Sorry!  Please try again.</h3>\n      <button className=\"popup--button\" type=\"button\" onClick={props.returnToDisplayAll}>Return to Question List</button>\n    </div>\n    )\n}\n\nexport default IncorrectAnswerPopup;","import React, { Component } from 'react';\nimport Question from './Question.js'\nimport AnswerCard from './AnswerCard.js'\nimport IncorrectAnswerPopup from './IncorrectAnswerPopup.js'\nimport './main.scss'\n\nclass Display extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showAllQuestions: true,\n      displayAnswer: false,\n      currentAnswerToDisplay: null,\n      showIncorrectAnswerPopup: false\n    }\n  }\n\n  putInLocalStorage = () => {\n    let itemsForStorage;\n    if (localStorage.length === 0) {   \n      itemsForStorage = {[this.state.currentAnswerToDisplay.id]: true}\n      localStorage.setItem(\"correctAnswers\", JSON.stringify(itemsForStorage))\n    } else if (localStorage.length > 0) {    \n      itemsForStorage = JSON.parse(localStorage.getItem(\"correctAnswers\"))\n      itemsForStorage[this.state.currentAnswerToDisplay.id] = true\n      localStorage.setItem(\"correctAnswers\", JSON.stringify(itemsForStorage))\n    }\n    this.props.setAnsweredQuestionsInState(itemsForStorage)\n    this.setState({currentAnswerToDisplay: null, showAllQuestions: true, displayAnswer: false})\n  }\n\n  verifyAnswer = (event) => {\n    let identifier = event.target.parentElement.id\n    let selectedQuestion = this.props.questionBank.find((question) => {\n      return question.id == identifier   \n    })\n    if (event.target.innerText !== selectedQuestion.correctAnswer) {\n      this.setState({displayAnswer: false, currentAnswerToDisplay: null, showAllQuestions: false, showIncorrectAnswerPopup: true})\n    } else {\n      this.setState({displayAnswer: true, currentAnswerToDisplay: selectedQuestion, showAllQuestions: false})\n    }\n  }\n\n  returnToDisplayAll = () => {\n    this.setState({displayAnswer: false, currentAnswerToDisplay: null, showAllQuestions: true, showIncorrectAnswerPopup: false})\n  }\n\n  render() {\n    if (this.state.showAllQuestions) {\n      return (\n        <main className=\"main-display\">    \n          {\n            this.props.questionBank.map((question) => {\n              return <Question \n                      questionInfo={question}\n                      verifyAnswer={this.verifyAnswer}\n                      key={question.id} />\n            })\n          }\n        </main> \n      )\n    } else if (this.state.displayAnswer === false && this.state.showAllQuestions === false && this.state.showIncorrectAnswerPopup === true) {\n        return(\n          <main className=\"main-display\">\n            <IncorrectAnswerPopup \n              returnToDisplayAll={this.returnToDisplayAll}\n              questionInfo={this.state.currentAnswerToDisplay}\n             />\n          </main>\n          )\n    } else if (this.state.showAllQuestions === false && this.state.displayAnswer === true) {\n      return (\n        <main className=\"main-display\">\n          <AnswerCard questionInfo={this.state.currentAnswerToDisplay} putInLocalStorage={this.putInLocalStorage} \n            returnToDisplayAll={this.returnToDisplayAll}/>\n        </main>\n      )\n    } \n  } \n}\n\nexport default Display;","import React from 'react';\nimport './main.scss'\n\nfunction InstructionsButton(props) {\n  return(\n    <div className=\"instructions-style-div\">\n      <button className=\"instructions-button\" type=\"button\" onClick={props.displayInstructions}>Click for Instructions</button>\n    </div>\n  )\n}\n\n\n\nexport default InstructionsButton;","import React from 'react';\nimport './main.scss'\n\nfunction Instructions(props) {\n  return(\n    <article className=\"instructions-display\">\n      <h2 className=\"instructions-header\">How to Use This App</h2>\n      <p className=\"instructions-article\">Click on any of the cards to display the correct answer.</p>\n      <p className=\"instructions-article\">After viewing the correct answer, click the button to return to the main display.</p>\n      <button type=\"button\" className=\"exit-instructions-button\" onClick={props.returnToMainDisplay}>Let's Go!</button>\n    </article>\n  )\n}\n\nexport default Instructions;","import React from 'react';\nimport './main.scss'\n\nfunction ShowAllQuestionsButton(props) {\n  return(\n    <div>\n      <button type=\"button\" className=\"show-all-questions-button\" onClick={props.showAllQuestions}>Reset All Questions</button>\n    </div>  \n  )\n}\n\nexport default ShowAllQuestionsButton;\n","import React, { Component } from 'react';\nimport Display from './Display.js';\nimport InstructionsButton from './InstructionsButton.js';\nimport Instructions from './Instructions.js';\nimport ShowAllQuestionsButton from './ShowAllQuestionsButton.js'\nimport './main.scss'\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      data: null,\n      isLoading: true,\n      showInstructions: false,\n      correctlyAnsweredQuestions: JSON.parse(localStorage.getItem('correctAnswers'))\n    }\n  }\n\n  componentDidMount() {\n    fetch('http://memoize-datasets.herokuapp.com/api/v1/mod2information')\n    .then(response => response.json())\n    .then(data => {\n      this.setState({data: data.mod2information, isLoading: false})\n    })\n    .catch(err => console.log(err))\n  }\n\n  displayInstructions = () => {\n    this.setState({showInstructions: true})\n  }\n\n  returnToMainDisplay = () =>  {\n    this.setState({showInstructions: false})\n  }\n\n  getUnansweredQuestions = () => {\n    let correctQuestionIds = this.state.correctlyAnsweredQuestions ? Object.keys(this.state.correctlyAnsweredQuestions) : []\n    let filteredQuestions = this.state.data.filter((question) => {\n      return !correctQuestionIds.includes(question.id.toString())\n    })\n    return filteredQuestions\n  }\n\n  setAnsweredQuestionsInState = (obj) => {\n    this.setState({correctlyAnsweredQuestions: obj})\n  }\n\n  showAllQuestions = (obj) => {\n    localStorage.clear()\n    this.setState({correctlyAnsweredQuestions: obj, isLoading: false, showInstructions: false})\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return (\n        <div>\n          <p>Loading...</p>\n        </div>\n      )\n    } else if (this.state.isLoading === false && this.state.showInstructions === true) {\n        return (\n          <div className=\"App\">       \n            <header className=\"App-header\">\n            <Instructions returnToMainDisplay={this.returnToMainDisplay} />\n            <h1 className=\"App-title\">Mod 2 Study Guide</h1>\n            <Display questionBank={this.getUnansweredQuestions()}\n                     setAnsweredQuestionsInState={this.setAnsweredQuestionsInState}\n                     key={this.state.data.id} />\n          </header>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"App\">       \n          <header className=\"App-header\">\n            <h1 className=\"App-title\">Mod 2 Study Guide</h1>\n            <div className=\"app-button-container\">\n              <InstructionsButton displayInstructions={this.displayInstructions} />\n              <ShowAllQuestionsButton showAllQuestions={this.showAllQuestions} />\n            </div>\n            <Display questionBank={this.getUnansweredQuestions()}\n                     setAnsweredQuestionsInState={this.setAnsweredQuestionsInState}\n                     key={this.state.data.id} />\n          </header>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}